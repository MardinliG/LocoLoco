"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/globe.gl";
exports.ids = ["vendor-chunks/globe.gl"];
exports.modules = {

/***/ "(ssr)/./node_modules/globe.gl/dist/globe.gl.mjs":
/*!*************************************************!*\
  !*** ./node_modules/globe.gl/dist/globe.gl.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ globe)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/renderers/CSS2DRenderer.js */ \"(ssr)/./node_modules/three/examples/jsm/renderers/CSS2DRenderer.js\");\n/* harmony import */ var three_globe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three-globe */ \"(ssr)/./node_modules/three-globe/dist/three-globe.mjs\");\n/* harmony import */ var three_render_objects__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three-render-objects */ \"(ssr)/./node_modules/three-render-objects/dist/three-render-objects.mjs\");\n/* harmony import */ var accessor_fn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! accessor-fn */ \"(ssr)/./node_modules/accessor-fn/dist/accessor-fn.mjs\");\n/* harmony import */ var kapsule__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! kapsule */ \"(ssr)/./node_modules/kapsule/dist/kapsule.mjs\");\n/* harmony import */ var _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tweenjs/tween.js */ \"(ssr)/./node_modules/@tweenjs/tween.js/dist/tween.esm.js\");\n\n\n\n\n\n\n\nfunction styleInject(css, ref) {\n    if (ref === void 0) ref = {};\n    var insertAt = ref.insertAt;\n    if (typeof document === \"undefined\") {\n        return;\n    }\n    var head = document.head || document.getElementsByTagName(\"head\")[0];\n    var style = document.createElement(\"style\");\n    style.type = \"text/css\";\n    if (insertAt === \"top\") {\n        if (head.firstChild) {\n            head.insertBefore(style, head.firstChild);\n        } else {\n            head.appendChild(style);\n        }\n    } else {\n        head.appendChild(style);\n    }\n    if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n    } else {\n        style.appendChild(document.createTextNode(css));\n    }\n}\nvar css_248z = \".scene-container .clickable {\\n  cursor: pointer;\\n}\";\nstyleInject(css_248z);\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction _arrayWithoutHoles(r) {\n    if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    }) : e[r] = t, e;\n}\nfunction _iterableToArray(r) {\n    if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread2(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), true).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _objectWithoutProperties(e, t) {\n    if (null == e) return {};\n    var o, r, i = _objectWithoutPropertiesLoose(e, t);\n    if (Object.getOwnPropertySymbols) {\n        var n = Object.getOwnPropertySymbols(e);\n        for(r = 0; r < n.length; r++)o = n[r], -1 === t.indexOf(o) && ({}).propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n    }\n    return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n    if (null == r) return {};\n    var t = {};\n    for(var n in r)if (({}).hasOwnProperty.call(r, n)) {\n        if (-1 !== e.indexOf(n)) continue;\n        t[n] = r[n];\n    }\n    return t;\n}\nfunction _toConsumableArray(r) {\n    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r);\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n}\nfunction linkKapsule(kapsulePropName, kapsuleType) {\n    var dummyK = new kapsuleType(); // To extract defaults\n    dummyK._destructor && dummyK._destructor();\n    return {\n        linkProp: function linkProp(prop) {\n            // link property config\n            return {\n                \"default\": dummyK[prop](),\n                onChange: function onChange(v, state) {\n                    state[kapsulePropName][prop](v);\n                },\n                triggerUpdate: false\n            };\n        },\n        linkMethod: function linkMethod(method) {\n            // link method pass-through\n            return function(state) {\n                var kapsuleInstance = state[kapsulePropName];\n                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                    args[_key - 1] = arguments[_key];\n                }\n                var returnVal = kapsuleInstance[method].apply(kapsuleInstance, args);\n                return returnVal === kapsuleInstance ? this // chain based on the parent object, not the inner kapsule\n                 : returnVal;\n            };\n        }\n    };\n}\nvar _excluded = [\n    \"rendererConfig\",\n    \"waitForGlobeReady\"\n];\nvar THREE = _objectSpread2(_objectSpread2({}, window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    AmbientLight: three__WEBPACK_IMPORTED_MODULE_2__.AmbientLight,\n    DirectionalLight: three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight,\n    Vector2: three__WEBPACK_IMPORTED_MODULE_2__.Vector2,\n    REVISION: three__WEBPACK_IMPORTED_MODULE_2__.REVISION\n}), {}, {\n    CSS2DRenderer: three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_3__.CSS2DRenderer\n});\n//\n// Expose config from ThreeGlobe\nvar bindGlobe = linkKapsule(\"globe\", three_globe__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\nvar linkedGlobeProps = Object.assign.apply(Object, _toConsumableArray([\n    \"globeImageUrl\",\n    \"bumpImageUrl\",\n    \"globeTileEngineUrl\",\n    \"globeTileEngineMaxLevel\",\n    \"showGlobe\",\n    \"showGraticules\",\n    \"showAtmosphere\",\n    \"atmosphereColor\",\n    \"atmosphereAltitude\",\n    \"onGlobeReady\",\n    \"pointsData\",\n    \"pointLat\",\n    \"pointLng\",\n    \"pointColor\",\n    \"pointAltitude\",\n    \"pointRadius\",\n    \"pointResolution\",\n    \"pointsMerge\",\n    \"pointsTransitionDuration\",\n    \"arcsData\",\n    \"arcStartLat\",\n    \"arcStartLng\",\n    \"arcEndLat\",\n    \"arcEndLng\",\n    \"arcColor\",\n    \"arcAltitude\",\n    \"arcAltitudeAutoScale\",\n    \"arcStroke\",\n    \"arcCurveResolution\",\n    \"arcCircularResolution\",\n    \"arcDashLength\",\n    \"arcDashGap\",\n    \"arcDashInitialGap\",\n    \"arcDashAnimateTime\",\n    \"arcsTransitionDuration\",\n    \"polygonsData\",\n    \"polygonGeoJsonGeometry\",\n    \"polygonCapColor\",\n    \"polygonCapMaterial\",\n    \"polygonSideColor\",\n    \"polygonSideMaterial\",\n    \"polygonStrokeColor\",\n    \"polygonAltitude\",\n    \"polygonCapCurvatureResolution\",\n    \"polygonsTransitionDuration\",\n    \"pathsData\",\n    \"pathPoints\",\n    \"pathPointLat\",\n    \"pathPointLng\",\n    \"pathPointAlt\",\n    \"pathResolution\",\n    \"pathColor\",\n    \"pathStroke\",\n    \"pathDashLength\",\n    \"pathDashGap\",\n    \"pathDashInitialGap\",\n    \"pathDashAnimateTime\",\n    \"pathTransitionDuration\",\n    \"heatmapsData\",\n    \"heatmapPoints\",\n    \"heatmapPointLat\",\n    \"heatmapPointLng\",\n    \"heatmapPointWeight\",\n    \"heatmapBandwidth\",\n    \"heatmapColorFn\",\n    \"heatmapColorSaturation\",\n    \"heatmapBaseAltitude\",\n    \"heatmapTopAltitude\",\n    \"heatmapsTransitionDuration\",\n    \"hexBinPointsData\",\n    \"hexBinPointLat\",\n    \"hexBinPointLng\",\n    \"hexBinPointWeight\",\n    \"hexBinResolution\",\n    \"hexMargin\",\n    \"hexTopCurvatureResolution\",\n    \"hexTopColor\",\n    \"hexSideColor\",\n    \"hexAltitude\",\n    \"hexBinMerge\",\n    \"hexTransitionDuration\",\n    \"hexPolygonsData\",\n    \"hexPolygonGeoJsonGeometry\",\n    \"hexPolygonColor\",\n    \"hexPolygonAltitude\",\n    \"hexPolygonResolution\",\n    \"hexPolygonMargin\",\n    \"hexPolygonUseDots\",\n    \"hexPolygonCurvatureResolution\",\n    \"hexPolygonDotResolution\",\n    \"hexPolygonsTransitionDuration\",\n    \"tilesData\",\n    \"tileLat\",\n    \"tileLng\",\n    \"tileAltitude\",\n    \"tileWidth\",\n    \"tileHeight\",\n    \"tileUseGlobeProjection\",\n    \"tileMaterial\",\n    \"tileCurvatureResolution\",\n    \"tilesTransitionDuration\",\n    \"particlesData\",\n    \"particlesList\",\n    \"particleLat\",\n    \"particleLng\",\n    \"particleAltitude\",\n    \"particlesSize\",\n    \"particlesSizeAttenuation\",\n    \"particlesColor\",\n    \"particlesTexture\",\n    \"ringsData\",\n    \"ringLat\",\n    \"ringLng\",\n    \"ringAltitude\",\n    \"ringColor\",\n    \"ringResolution\",\n    \"ringMaxRadius\",\n    \"ringPropagationSpeed\",\n    \"ringRepeatPeriod\",\n    \"labelsData\",\n    \"labelLat\",\n    \"labelLng\",\n    \"labelAltitude\",\n    \"labelRotation\",\n    \"labelText\",\n    \"labelSize\",\n    \"labelTypeFace\",\n    \"labelColor\",\n    \"labelResolution\",\n    \"labelIncludeDot\",\n    \"labelDotRadius\",\n    \"labelDotOrientation\",\n    \"labelsTransitionDuration\",\n    \"htmlElementsData\",\n    \"htmlLat\",\n    \"htmlLng\",\n    \"htmlAltitude\",\n    \"htmlElement\",\n    \"htmlElementVisibilityModifier\",\n    \"htmlTransitionDuration\",\n    \"objectsData\",\n    \"objectLat\",\n    \"objectLng\",\n    \"objectAltitude\",\n    \"objectRotation\",\n    \"objectFacesSurface\",\n    \"objectThreeObject\",\n    \"customLayerData\",\n    \"customThreeObject\",\n    \"customThreeObjectUpdate\"\n].map(function(p) {\n    return _defineProperty({}, p, bindGlobe.linkProp(p));\n})));\nvar linkedGlobeMethods = Object.assign.apply(Object, _toConsumableArray([\n    \"globeMaterial\",\n    \"getGlobeRadius\",\n    \"getCoords\",\n    \"toGeoCoords\"\n].map(function(p) {\n    return _defineProperty({}, p, bindGlobe.linkMethod(p));\n})));\n// Expose config from renderObjs\nvar bindRenderObjs = linkKapsule(\"renderObjs\", three_render_objects__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\nvar linkedRenderObjsProps = Object.assign.apply(Object, _toConsumableArray([\n    \"width\",\n    \"height\",\n    \"backgroundColor\",\n    \"backgroundImageUrl\",\n    \"enablePointerInteraction\"\n].map(function(p) {\n    return _defineProperty({}, p, bindRenderObjs.linkProp(p));\n})));\nvar linkedRenderObjsMethods = Object.assign.apply(Object, _toConsumableArray([\n    \"lights\",\n    \"postProcessingComposer\"\n].map(function(p) {\n    return _defineProperty({}, p, bindRenderObjs.linkMethod(p));\n})));\n//\nvar globe = (0,kapsule__WEBPACK_IMPORTED_MODULE_6__[\"default\"])({\n    props: _objectSpread2(_objectSpread2({\n        onZoom: {\n            triggerUpdate: false\n        },\n        onGlobeClick: {\n            triggerUpdate: false\n        },\n        onGlobeRightClick: {\n            triggerUpdate: false\n        },\n        pointLabel: {\n            \"default\": \"name\",\n            triggerUpdate: false\n        },\n        onPointClick: {\n            triggerUpdate: false\n        },\n        onPointRightClick: {\n            triggerUpdate: false\n        },\n        onPointHover: {\n            triggerUpdate: false\n        },\n        arcLabel: {\n            \"default\": \"name\",\n            triggerUpdate: false\n        },\n        onArcClick: {\n            triggerUpdate: false\n        },\n        onArcRightClick: {\n            triggerUpdate: false\n        },\n        onArcHover: {\n            triggerUpdate: false\n        },\n        polygonLabel: {\n            \"default\": \"name\",\n            triggerUpdate: false\n        },\n        onPolygonClick: {\n            triggerUpdate: false\n        },\n        onPolygonRightClick: {\n            triggerUpdate: false\n        },\n        onPolygonHover: {\n            triggerUpdate: false\n        },\n        pathLabel: {\n            \"default\": \"name\",\n            triggerUpdate: false\n        },\n        onPathClick: {\n            triggerUpdate: false\n        },\n        onPathRightClick: {\n            triggerUpdate: false\n        },\n        onPathHover: {\n            triggerUpdate: false\n        },\n        onHeatmapClick: {\n            triggerUpdate: false\n        },\n        onHeatmapRightClick: {\n            triggerUpdate: false\n        },\n        onHeatmapHover: {\n            triggerUpdate: false\n        },\n        hexLabel: {\n            triggerUpdate: false\n        },\n        onHexClick: {\n            triggerUpdate: false\n        },\n        onHexRightClick: {\n            triggerUpdate: false\n        },\n        onHexHover: {\n            triggerUpdate: false\n        },\n        hexPolygonLabel: {\n            triggerUpdate: false\n        },\n        onHexPolygonClick: {\n            triggerUpdate: false\n        },\n        onHexPolygonRightClick: {\n            triggerUpdate: false\n        },\n        onHexPolygonHover: {\n            triggerUpdate: false\n        },\n        tileLabel: {\n            \"default\": \"name\",\n            triggerUpdate: false\n        },\n        onTileClick: {\n            triggerUpdate: false\n        },\n        onTileRightClick: {\n            triggerUpdate: false\n        },\n        onTileHover: {\n            triggerUpdate: false\n        },\n        particleLabel: {\n            \"default\": \"name\",\n            triggerUpdate: false\n        },\n        onParticleClick: {\n            triggerUpdate: false\n        },\n        onParticleRightClick: {\n            triggerUpdate: false\n        },\n        onParticleHover: {\n            triggerUpdate: false\n        },\n        labelLabel: {\n            triggerUpdate: false\n        },\n        onLabelClick: {\n            triggerUpdate: false\n        },\n        onLabelRightClick: {\n            triggerUpdate: false\n        },\n        onLabelHover: {\n            triggerUpdate: false\n        },\n        objectLabel: {\n            \"default\": \"name\",\n            triggerUpdate: false\n        },\n        onObjectClick: {\n            triggerUpdate: false\n        },\n        onObjectRightClick: {\n            triggerUpdate: false\n        },\n        onObjectHover: {\n            triggerUpdate: false\n        },\n        customLayerLabel: {\n            \"default\": \"name\",\n            triggerUpdate: false\n        },\n        onCustomLayerClick: {\n            triggerUpdate: false\n        },\n        onCustomLayerRightClick: {\n            triggerUpdate: false\n        },\n        onCustomLayerHover: {\n            triggerUpdate: false\n        },\n        pointerEventsFilter: {\n            \"default\": function _default() {\n                return true;\n            },\n            triggerUpdate: false\n        },\n        lineHoverPrecision: {\n            \"default\": 0.2,\n            triggerUpdate: false,\n            onChange: function onChange(val, state) {\n                state.renderObjs.lineHoverPrecision(val);\n                state.renderObjs.pointsHoverPrecision(val);\n            }\n        },\n        globeOffset: {\n            \"default\": [\n                0,\n                0\n            ],\n            triggerUpdate: false,\n            onChange: function onChange(o, state) {\n                return Array.isArray(o) && o.length === 2 && state.renderObjs.viewOffset(o.map(function(v) {\n                    return -v;\n                }));\n            }\n        }\n    }, linkedGlobeProps), linkedRenderObjsProps),\n    methods: _objectSpread2(_objectSpread2({\n        pauseAnimation: function pauseAnimation(state) {\n            var _state$globe;\n            if (state.animationFrameRequestId !== null) {\n                cancelAnimationFrame(state.animationFrameRequestId);\n                state.animationFrameRequestId = null;\n            }\n            (_state$globe = state.globe) === null || _state$globe === void 0 || _state$globe.pauseAnimation();\n            return this;\n        },\n        resumeAnimation: function resumeAnimation(state) {\n            var _state$globe2;\n            if (state.animationFrameRequestId === null) {\n                this._animationCycle();\n            }\n            (_state$globe2 = state.globe) === null || _state$globe2 === void 0 || _state$globe2.resumeAnimation();\n            return this;\n        },\n        _animationCycle: function _animationCycle(state) {\n            // Frame cycle\n            state.renderObjs.tick();\n            state.tweenGroup.update();\n            state.animationFrameRequestId = requestAnimationFrame(this._animationCycle);\n        },\n        pointOfView: function pointOfView(state) {\n            var geoCoords = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            var transitionDuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            var curGeoCoords = getGeoCoords();\n            // Getter\n            if (geoCoords.lat === undefined && geoCoords.lng === undefined && geoCoords.altitude === undefined) {\n                return curGeoCoords;\n            } else {\n                // Setter\n                var finalGeoCoords = Object.assign({}, curGeoCoords, geoCoords);\n                [\n                    \"lat\",\n                    \"lng\",\n                    \"altitude\"\n                ].forEach(function(p) {\n                    return finalGeoCoords[p] = +finalGeoCoords[p];\n                }); // coerce coords to number\n                if (!transitionDuration) {\n                    // no animation\n                    setCameraPos(finalGeoCoords);\n                } else {\n                    // Avoid rotating more than 180deg longitude\n                    while(curGeoCoords.lng - finalGeoCoords.lng > 180)curGeoCoords.lng -= 360;\n                    while(curGeoCoords.lng - finalGeoCoords.lng < -180)curGeoCoords.lng += 360;\n                    state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_1__.Tween(curGeoCoords).to(finalGeoCoords, transitionDuration).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_1__.Easing.Cubic.InOut).onUpdate(setCameraPos).start());\n                }\n                return this;\n            }\n            //\n            function getGeoCoords() {\n                return state.globe.toGeoCoords(state.renderObjs.cameraPosition());\n            }\n            function setCameraPos(_ref5) {\n                var lat = _ref5.lat, lng = _ref5.lng, altitude = _ref5.altitude;\n                state.renderObjs.cameraPosition(state.globe.getCoords(lat, lng, altitude));\n                state.globe.setPointOfView(state.renderObjs.camera()); // report position to globe\n            }\n        },\n        getScreenCoords: function getScreenCoords(state) {\n            var _state$globe3;\n            for(var _len = arguments.length, geoCoords = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                geoCoords[_key - 1] = arguments[_key];\n            }\n            var cartesianCoords = (_state$globe3 = state.globe).getCoords.apply(_state$globe3, geoCoords);\n            return state.renderObjs.getScreenCoords(cartesianCoords.x, cartesianCoords.y, cartesianCoords.z);\n        },\n        toGlobeCoords: function toGlobeCoords(state, x, y) {\n            var globeIntersects = state.renderObjs.intersectingObjects(x, y).find(function(d) {\n                return (d.object.__globeObjType || d.object.parent.__globeObjType) === \"globe\";\n            });\n            if (!globeIntersects) return null; // coords outside globe\n            var _state$globe$toGeoCoo = state.globe.toGeoCoords(globeIntersects.point), lat = _state$globe$toGeoCoo.lat, lng = _state$globe$toGeoCoo.lng;\n            return {\n                lat: lat,\n                lng: lng\n            };\n        },\n        scene: function scene(state) {\n            return state.renderObjs.scene();\n        },\n        // Expose scene\n        camera: function camera(state) {\n            return state.renderObjs.camera();\n        },\n        // Expose camera\n        renderer: function renderer(state) {\n            return state.renderObjs.renderer();\n        },\n        // Expose renderer\n        controls: function controls(state) {\n            return state.renderObjs.controls();\n        },\n        // Expose controls\n        _destructor: function _destructor(state) {\n            state.globe._destructor();\n            this.pauseAnimation();\n            this.pointsData([]);\n            this.arcsData([]);\n            this.polygonsData([]);\n            this.pathsData([]);\n            this.heatmapsData([]);\n            this.hexBinPointsData([]);\n            this.hexPolygonsData([]);\n            this.tilesData([]);\n            this.particlesData([]);\n            this.labelsData([]);\n            this.htmlElementsData([]);\n            this.objectsData([]);\n            this.customLayerData([]);\n        }\n    }, linkedGlobeMethods), linkedRenderObjsMethods),\n    stateInit: function stateInit(_ref6) {\n        var rendererConfig = _ref6.rendererConfig, _ref6$waitForGlobeRea = _ref6.waitForGlobeReady, waitForGlobeReady = _ref6$waitForGlobeRea === void 0 ? true : _ref6$waitForGlobeRea, globeInitConfig = _objectWithoutProperties(_ref6, _excluded);\n        var globe = new three_globe__WEBPACK_IMPORTED_MODULE_4__[\"default\"](_objectSpread2({\n            waitForGlobeReady: waitForGlobeReady\n        }, globeInitConfig));\n        return {\n            globe: globe,\n            renderObjs: (0,three_render_objects__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({\n                controlType: \"orbit\",\n                rendererConfig: rendererConfig,\n                waitForLoadComplete: waitForGlobeReady,\n                extraRenderers: [\n                    new THREE.CSS2DRenderer()\n                ] // Used in HTML elements layer\n            }).skyRadius(globe.getGlobeRadius() * 500).showNavInfo(false).objects([\n                globe\n            ]) // Populate scene\n            .lights([\n                new THREE.AmbientLight(0xcccccc, Math.PI),\n                new THREE.DirectionalLight(0xffffff, 0.6 * Math.PI)\n            ]),\n            tweenGroup: new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_1__.Group()\n        };\n    },\n    init: function init(domNode, state) {\n        var _this = this;\n        // Wipe DOM\n        domNode.innerHTML = \"\";\n        // Add relative container\n        domNode.appendChild(state.container = document.createElement(\"div\"));\n        state.container.style.position = \"relative\";\n        // Add renderObjs\n        var roDomNode = document.createElement(\"div\");\n        state.container.appendChild(roDomNode);\n        state.renderObjs(roDomNode);\n        // inject renderer size on three-globe\n        state.globe.rendererSize(state.renderObjs.renderer().getSize(new THREE.Vector2()));\n        // set initial distance\n        this.pointOfView({\n            altitude: 2.5\n        });\n        // calibrate orbit controls\n        var globeR = state.globe.getGlobeRadius();\n        var controls = state.renderObjs.controls();\n        state.renderObjs.camera().near = 0.05; // less will start causing depth z-fighting issues\n        controls.minDistance = globeR + Math.max(0.001, state.renderObjs.camera().near * 1.1); // just above the surface, as much as camera near plane permits\n        controls.maxDistance = globeR * 100;\n        controls.enablePan = false;\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.1;\n        controls.rotateSpeed = 0.3;\n        controls.zoomSpeed = 0.3;\n        controls.zoomToCursor = true;\n        controls.addEventListener(\"change\", function() {\n            controls.target.setScalar(0); // Keep orbit target on center\n            // adjust controls speed based on altitude\n            var pov = _this.pointOfView();\n            controls.rotateSpeed = pov.altitude * 0.3;\n            controls.zoomSpeed = Math.sqrt(pov.altitude) * 0.5;\n            // Update three-globe pov when camera moves, for proper hiding of elements\n            state.globe.setPointOfView(state.renderObjs.camera());\n            state.onZoom && state.onZoom(pov);\n        });\n        // config renderObjs\n        var getGlobeObj = function getGlobeObj(object) {\n            var obj = object;\n            // recurse up object chain until finding the globe object\n            while(obj && !obj.hasOwnProperty(\"__globeObjType\")){\n                obj = obj.parent;\n            }\n            return obj;\n        };\n        var dataAccessors = {\n            point: function point(d) {\n                return d;\n            },\n            arc: function arc(d) {\n                return d;\n            },\n            polygon: function polygon(d) {\n                return d.data;\n            },\n            path: function path(d) {\n                return d;\n            },\n            heatmap: function heatmap(d) {\n                return d;\n            },\n            hexbin: function hexbin(d) {\n                return d;\n            },\n            hexPolygon: function hexPolygon(d) {\n                return d;\n            },\n            tile: function tile(d) {\n                return d;\n            },\n            particles: function particles(d, intersection) {\n                return !intersection || !intersection.hasOwnProperty(\"index\") || d.length <= intersection.index ? d : d[intersection.index];\n            },\n            label: function label(d) {\n                return d;\n            },\n            object: function object(d) {\n                return d;\n            },\n            custom: function custom(d) {\n                return d;\n            }\n        };\n        THREE.REVISION < 155 && (state.renderObjs.renderer().useLegacyLights = false); // force behavior of three < 155\n        state.renderObjs.hoverFilter(function(obj) {\n            var o = getGlobeObj(obj);\n            // ignore non-globe objects\n            if (!o) return false;\n            var type = o.__globeObjType;\n            if (type !== \"globe\" && !dataAccessors.hasOwnProperty(type)) return false; // Ignore obj types with no data\n            var d = dataAccessors.hasOwnProperty(type) && o.__data ? dataAccessors[type](o.__data) : null;\n            // Ignore merged geometry objects that don't have interaction per point\n            if ([\n                \"points\",\n                \"hexBinPoints\"\n            ].some(function(t) {\n                return t === type;\n            }) && Array.isArray(d)) return false;\n            return state.pointerEventsFilter(o, d);\n        }).tooltipContent(function(obj, intersection) {\n            var objAccessors = {\n                point: state.pointLabel,\n                arc: state.arcLabel,\n                polygon: state.polygonLabel,\n                path: state.pathLabel,\n                hexbin: state.hexLabel,\n                hexPolygon: state.hexPolygonLabel,\n                tile: state.tileLabel,\n                particles: state.particleLabel,\n                label: state.labelLabel,\n                object: state.objectLabel,\n                custom: state.customLayerLabel\n            };\n            var globeObj = getGlobeObj(obj);\n            var objType = globeObj && globeObj.__globeObjType;\n            return globeObj && objType && objAccessors.hasOwnProperty(objType) && dataAccessors.hasOwnProperty(objType) ? (0,accessor_fn__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(objAccessors[objType])(dataAccessors[objType](globeObj.__data, intersection)) || \"\" : \"\";\n        }).onHover(function(obj, _, intersection) {\n            // Update tooltip and trigger onHover events\n            var hoverObjFns = {\n                point: state.onPointHover,\n                arc: state.onArcHover,\n                polygon: state.onPolygonHover,\n                path: state.onPathHover,\n                heatmap: state.onHeatmapHover,\n                hexbin: state.onHexHover,\n                hexPolygon: state.onHexPolygonHover,\n                tile: state.onTileHover,\n                particles: state.onParticleHover,\n                label: state.onLabelHover,\n                object: state.onObjectHover,\n                custom: state.onCustomLayerHover\n            };\n            var clickObjFns = {\n                globe: state.onGlobeClick,\n                point: state.onPointClick,\n                arc: state.onArcClick,\n                polygon: state.onPolygonClick,\n                path: state.onPathClick,\n                heatmap: state.onHeatmapClick,\n                hexbin: state.onHexClick,\n                hexPolygon: state.onHexPolygonClick,\n                tile: state.onTileClick,\n                particles: state.onParticleClick,\n                label: state.onLabelClick,\n                object: state.onObjectClick,\n                custom: state.onCustomLayerClick\n            };\n            var hoverObj = getGlobeObj(obj);\n            // ignore non-recognised obj types\n            hoverObj && !hoverObjFns.hasOwnProperty(hoverObj.__globeObjType) && (hoverObj = null);\n            if (hoverObj !== state.hoverObj) {\n                var prevObjType = state.hoverObj ? state.hoverObj.__globeObjType : null;\n                var prevObjData = state.hoverData;\n                var objType = hoverObj ? hoverObj.__globeObjType : null;\n                var objData = hoverObj ? dataAccessors[objType](hoverObj.__data, intersection) : null;\n                if (prevObjType && prevObjType !== objType) {\n                    // Hover out\n                    hoverObjFns[prevObjType] && hoverObjFns[prevObjType](null, prevObjData || null);\n                }\n                if (objType) {\n                    // Hover in\n                    hoverObjFns[objType] && hoverObjFns[objType](objData, prevObjType === objType ? prevObjData : null);\n                }\n                // set pointer if hovered object is clickable\n                state.renderObjs.renderer().domElement.classList[objType && clickObjFns[objType] ? \"add\" : \"remove\"](\"clickable\");\n                state.hoverObj = hoverObj;\n                state.hoverData = objData;\n            }\n        }).onClick(function(obj, ev, intersection) {\n            if (!obj) return; // ignore background clicks\n            // Handle click events on objects\n            var objFns = {\n                globe: state.onGlobeClick,\n                point: state.onPointClick,\n                arc: state.onArcClick,\n                polygon: state.onPolygonClick,\n                path: state.onPathClick,\n                heatmap: state.onHeatmapClick,\n                hexbin: state.onHexClick,\n                hexPolygon: state.onHexPolygonClick,\n                tile: state.onTileClick,\n                particles: state.onParticleClick,\n                label: state.onLabelClick,\n                object: state.onObjectClick,\n                custom: state.onCustomLayerClick\n            };\n            var globeObj = getGlobeObj(obj);\n            var objType = globeObj.__globeObjType;\n            if (globeObj && objFns.hasOwnProperty(objType) && objFns[objType]) {\n                var args = [\n                    ev\n                ];\n                // include click coords\n                var point = intersection !== null && intersection !== void 0 && intersection.isVector3 ? intersection : intersection === null || intersection === void 0 ? void 0 : intersection.point;\n                if (objType === \"globe\") {\n                    var _this$toGeoCoords = _this.toGeoCoords(point), lat = _this$toGeoCoords.lat, lng = _this$toGeoCoords.lng;\n                    args.unshift({\n                        lat: lat,\n                        lng: lng\n                    });\n                } else {\n                    args.push(_this.toGeoCoords(point));\n                }\n                dataAccessors.hasOwnProperty(objType) && args.unshift(dataAccessors[objType](globeObj.__data, intersection));\n                objFns[objType].apply(objFns, args);\n            }\n        }).onRightClick(function(obj, ev, intersection) {\n            if (!obj) return; // ignore background clicks\n            // Handle right-click events\n            var objFns = {\n                globe: state.onGlobeRightClick,\n                point: state.onPointRightClick,\n                arc: state.onArcRightClick,\n                polygon: state.onPolygonRightClick,\n                path: state.onPathRightClick,\n                heatmap: state.onHeatmapRightClick,\n                hexbin: state.onHexRightClick,\n                hexPolygon: state.onHexPolygonRightClick,\n                tile: state.onTileRightClick,\n                particles: state.onParticleRightClick,\n                label: state.onLabelRightClick,\n                object: state.onObjectRightClick,\n                custom: state.onCustomLayerRightClick\n            };\n            var globeObj = getGlobeObj(obj);\n            var objType = globeObj.__globeObjType;\n            if (globeObj && objFns.hasOwnProperty(objType) && objFns[objType]) {\n                var args = [\n                    ev\n                ];\n                // include click coords\n                var point = intersection !== null && intersection !== void 0 && intersection.isVector3 ? intersection : intersection === null || intersection === void 0 ? void 0 : intersection.point;\n                if (objType === \"globe\") {\n                    var _this$toGeoCoords2 = _this.toGeoCoords(point), lat = _this$toGeoCoords2.lat, lng = _this$toGeoCoords2.lng;\n                    args.unshift({\n                        lat: lat,\n                        lng: lng\n                    });\n                } else {\n                    args.push(_this.toGeoCoords(point));\n                }\n                dataAccessors.hasOwnProperty(objType) && args.unshift(dataAccessors[objType](globeObj.__data, intersection));\n                objFns[objType].apply(objFns, args);\n            }\n        });\n        //\n        // Kick-off renderer\n        this._animationCycle();\n    }\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/globe.gl/dist/globe.gl.mjs\n");

/***/ })

};
;