"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/float-tooltip";
exports.ids = ["vendor-chunks/float-tooltip"];
exports.modules = {

/***/ "(ssr)/./node_modules/float-tooltip/dist/float-tooltip.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/float-tooltip/dist/float-tooltip.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ index)\n/* harmony export */ });\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-selection */ \"(ssr)/./node_modules/d3-selection/src/select.js\");\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-selection */ \"(ssr)/./node_modules/d3-selection/src/pointer.js\");\n/* harmony import */ var kapsule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kapsule */ \"(ssr)/./node_modules/kapsule/dist/kapsule.mjs\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! preact */ \"(ssr)/./node_modules/preact/dist/preact.mjs\");\n\n\n\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    }) : e[r] = t, e;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = true, o = false;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) ;\n            else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = true, n = r;\n        } finally{\n            try {\n                if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread2(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), true).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r);\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n}\nvar _reactElement2VNode = function reactElement2VNode(el) {\n    // Among other things, react VNodes (and all its children) need to have constructor: undefined attributes in order to be recognised, cloneElement (applied recursively) does the necessary conversion\n    if (!(_typeof(el) === \"object\")) return el;\n    var res = (0,preact__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(el);\n    if (res.props) {\n        var _res$props;\n        res.props = _objectSpread2({}, res.props);\n        if (res !== null && res !== void 0 && (_res$props = res.props) !== null && _res$props !== void 0 && _res$props.children) {\n            res.props.children = Array.isArray(res.props.children) ? res.props.children.map(_reactElement2VNode) : _reactElement2VNode(res.props.children);\n        }\n    }\n    return res;\n};\nvar isReactRenderable = function isReactRenderable(o) {\n    return (0,preact__WEBPACK_IMPORTED_MODULE_0__.isValidElement)((0,preact__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(o));\n};\nvar render = function render(jsx, domEl) {\n    delete domEl.__k; // Wipe traces of previous preact renders\n    (0,preact__WEBPACK_IMPORTED_MODULE_0__.render)(_reactElement2VNode(jsx), domEl);\n};\nfunction styleInject(css, ref) {\n    if (ref === void 0) ref = {};\n    var insertAt = ref.insertAt;\n    if (typeof document === \"undefined\") {\n        return;\n    }\n    var head = document.head || document.getElementsByTagName(\"head\")[0];\n    var style = document.createElement(\"style\");\n    style.type = \"text/css\";\n    if (insertAt === \"top\") {\n        if (head.firstChild) {\n            head.insertBefore(style, head.firstChild);\n        } else {\n            head.appendChild(style);\n        }\n    } else {\n        head.appendChild(style);\n    }\n    if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n    } else {\n        style.appendChild(document.createTextNode(css));\n    }\n}\nvar css_248z = \".float-tooltip-kap {\\n  position: absolute;\\n  width: max-content; /* prevent shrinking near right edge */\\n  max-width: max(50%, 150px);\\n  padding: 3px 5px;\\n  border-radius: 3px;\\n  font: 12px sans-serif;\\n  color: #eee;\\n  background: rgba(0,0,0,0.6);\\n  pointer-events: none;\\n}\\n\";\nstyleInject(css_248z);\nvar index = (0,kapsule__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n    props: {\n        content: {\n            \"default\": false\n        },\n        offsetX: {\n            triggerUpdate: false\n        },\n        // null or number\n        offsetY: {\n            triggerUpdate: false\n        } // null or number\n    },\n    init: function init(domNode, state) {\n        var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style;\n        var isD3Selection = !!domNode && _typeof(domNode) === \"object\" && !!domNode.node && typeof domNode.node === \"function\";\n        var el = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(isD3Selection ? domNode.node() : domNode);\n        // make sure container is positioned, to provide anchor for tooltip\n        el.style(\"position\") === \"static\" && el.style(\"position\", \"relative\");\n        state.tooltipEl = el.append(\"div\").attr(\"class\", \"float-tooltip-kap\");\n        Object.entries(style).forEach(function(_ref2) {\n            var _ref3 = _slicedToArray(_ref2, 2), k = _ref3[0], v = _ref3[1];\n            return state.tooltipEl.style(k, v);\n        });\n        state.tooltipEl // start off-screen\n        .style(\"left\", \"-10000px\").style(\"display\", \"none\");\n        var evSuffix = \"tooltip-\".concat(Math.round(Math.random() * 1e12));\n        state.mouseInside = false;\n        el.on(\"mousemove.\".concat(evSuffix), function(ev) {\n            state.mouseInside = true;\n            var mousePos = (0,d3_selection__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(ev);\n            var domNode = el.node();\n            var canvasWidth = domNode.offsetWidth;\n            var canvasHeight = domNode.offsetHeight;\n            var translate = [\n                state.offsetX === null || state.offsetX === undefined ? \"-\".concat(mousePos[0] / canvasWidth * 100, \"%\") : typeof state.offsetX === \"number\" ? \"calc(-50% + \".concat(state.offsetX, \"px)\") : state.offsetX,\n                state.offsetY === null || state.offsetY === undefined ? canvasHeight > 130 && canvasHeight - mousePos[1] < 100 ? \"calc(-100% - 6px)\" : \"21px\" : typeof state.offsetY === \"number\" ? state.offsetY < 0 ? \"calc(-100% - \".concat(Math.abs(state.offsetY), \"px)\") : \"\".concat(state.offsetY, \"px\") : state.offsetY\n            ];\n            state.tooltipEl.style(\"left\", mousePos[0] + \"px\").style(\"top\", mousePos[1] + \"px\").style(\"transform\", \"translate(\".concat(translate.join(\",\"), \")\"));\n            state.content && state.tooltipEl.style(\"display\", \"inline\");\n        });\n        el.on(\"mouseover.\".concat(evSuffix), function() {\n            state.mouseInside = true;\n            state.content && state.tooltipEl.style(\"display\", \"inline\");\n        });\n        el.on(\"mouseout.\".concat(evSuffix), function() {\n            state.mouseInside = false;\n            state.tooltipEl.style(\"display\", \"none\");\n        });\n    },\n    update: function update(state) {\n        state.tooltipEl.style(\"display\", !!state.content && state.mouseInside ? \"inline\" : \"none\");\n        if (!state.content) {\n            state.tooltipEl.text(\"\");\n        } else if (state.content instanceof HTMLElement) {\n            state.tooltipEl.text(\"\"); // empty it\n            state.tooltipEl.append(function() {\n                return state.content;\n            });\n        } else if (typeof state.content === \"string\") {\n            state.tooltipEl.html(state.content);\n        } else if (isReactRenderable(state.content)) {\n            state.tooltipEl.text(\"\"); // empty it\n            render(state.content, state.tooltipEl.node());\n        } else {\n            state.tooltipEl.style(\"display\", \"none\");\n            console.warn(\"Tooltip content is invalid, skipping.\", state.content, state.content.toString());\n        }\n    }\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/float-tooltip/dist/float-tooltip.mjs\n");

/***/ })

};
;