"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/data-bind-mapper";
exports.ids = ["vendor-chunks/data-bind-mapper"];
exports.modules = {

/***/ "(ssr)/./node_modules/data-bind-mapper/dist/data-bind-mapper.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/data-bind-mapper/dist/data-bind-mapper.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DataBindMapper)\n/* harmony export */ });\n/* harmony import */ var accessor_fn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! accessor-fn */ \"(ssr)/./node_modules/accessor-fn/dist/accessor-fn.mjs\");\n\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n}\nfunction _arrayWithoutHoles(r) {\n    if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _assertClassBrand(e, t, n) {\n    if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n    throw new TypeError(\"Private element is not present on this object\");\n}\nfunction _checkPrivateRedeclaration(e, t) {\n    if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _classPrivateFieldGet2(s, a) {\n    return s.get(_assertClassBrand(s, a));\n}\nfunction _classPrivateFieldInitSpec(e, t, a) {\n    _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _classPrivateFieldSet2(s, a, r) {\n    return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || false, o.configurable = true, \"value\" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), Object.defineProperty(e, \"prototype\", {\n        writable: false\n    }), e;\n}\nfunction _iterableToArray(r) {\n    if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = true, o = false;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) ;\n            else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = true, n = r;\n        } finally{\n            try {\n                if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _toConsumableArray(r) {\n    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r);\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return String(t);\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n}\nvar _dataMap = /*#__PURE__*/ new WeakMap();\nvar _objMap = /*#__PURE__*/ new WeakMap();\nvar _id = /*#__PURE__*/ new WeakMap();\nvar _createObj = /*#__PURE__*/ new WeakMap();\nvar _updateObj = /*#__PURE__*/ new WeakMap();\nvar _removeObj = /*#__PURE__*/ new WeakMap();\nvar DataBindMapper = /*#__PURE__*/ function() {\n    function DataBindMapper() {\n        _classCallCheck(this, DataBindMapper);\n        _classPrivateFieldInitSpec(this, _dataMap, new Map());\n        _classPrivateFieldInitSpec(this, _objMap, new Map());\n        _classPrivateFieldInitSpec(this, _id, function(d) {\n            return d;\n        });\n        _classPrivateFieldInitSpec(this, _createObj, function() {\n            return {};\n        });\n        _classPrivateFieldInitSpec(this, _updateObj, function() {});\n        _classPrivateFieldInitSpec(this, _removeObj, function() {});\n    }\n    return _createClass(DataBindMapper, [\n        {\n            key: \"getObj\",\n            value: function getObj(d) {\n                return _classPrivateFieldGet2(_dataMap, this).get(_classPrivateFieldGet2(_id, this).call(this, d));\n            }\n        },\n        {\n            key: \"getData\",\n            value: function getData(o) {\n                return _classPrivateFieldGet2(_objMap, this).get(o);\n            }\n        },\n        {\n            key: \"entries\",\n            value: function entries() {\n                return _toConsumableArray(_classPrivateFieldGet2(_objMap, this).entries()).map(function(_ref) {\n                    var _ref2 = _slicedToArray(_ref, 2), o = _ref2[0], d = _ref2[1];\n                    return [\n                        d,\n                        o\n                    ];\n                });\n            }\n        },\n        {\n            key: \"id\",\n            value: function id(p) {\n                _classPrivateFieldSet2(_id, this, (0,accessor_fn__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(p));\n                return this;\n            }\n        },\n        {\n            key: \"onCreateObj\",\n            value: function onCreateObj(fn) {\n                _classPrivateFieldSet2(_createObj, this, fn);\n                return this;\n            }\n        },\n        {\n            key: \"onUpdateObj\",\n            value: function onUpdateObj(fn) {\n                _classPrivateFieldSet2(_updateObj, this, fn);\n                return this;\n            }\n        },\n        {\n            key: \"onRemoveObj\",\n            value: function onRemoveObj(fn) {\n                _classPrivateFieldSet2(_removeObj, this, fn);\n                return this;\n            }\n        },\n        {\n            key: \"digest\",\n            value: function digest(data) {\n                var _this = this;\n                data.filter(function(d) {\n                    return !_classPrivateFieldGet2(_dataMap, _this).has(_classPrivateFieldGet2(_id, _this).call(_this, d));\n                }).forEach(function(d) {\n                    var obj = _classPrivateFieldGet2(_createObj, _this).call(_this, d);\n                    _classPrivateFieldGet2(_dataMap, _this).set(_classPrivateFieldGet2(_id, _this).call(_this, d), obj);\n                    _classPrivateFieldGet2(_objMap, _this).set(obj, d);\n                });\n                var dataIdsMap = new Map(data.map(function(d) {\n                    return [\n                        _classPrivateFieldGet2(_id, _this).call(_this, d),\n                        d\n                    ];\n                }));\n                _classPrivateFieldGet2(_dataMap, this).forEach(function(o, dId) {\n                    if (!dataIdsMap.has(dId)) {\n                        _classPrivateFieldGet2(_removeObj, _this).call(_this, o, dId);\n                        _classPrivateFieldGet2(_dataMap, _this)[\"delete\"](dId);\n                        _classPrivateFieldGet2(_objMap, _this)[\"delete\"](o);\n                    } else {\n                        _classPrivateFieldGet2(_updateObj, _this).call(_this, o, dataIdsMap.get(dId));\n                    }\n                });\n                return this;\n            }\n        },\n        {\n            key: \"clear\",\n            value: function clear() {\n                this.digest([]);\n                return this;\n            }\n        }\n    ]);\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/data-bind-mapper/dist/data-bind-mapper.mjs\n");

/***/ })

};
;